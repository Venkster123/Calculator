#!/bin/bash

set -e

if [ "$#" -eq 0 ]; then
	echo "Expected at least one argument"
elif [ $1 = "install" ]; then
	echo "Installing..."

	# Register apps directory
	echo "PATH=${PATH}:$(pwd)/bin" >> .env

	source .env

	# Run cmake
	cmake .
	
	mkdir -p bin
	mkdir -p build

	# Compile apps
	make -j8 all

	# Move executables and libraries
	if [ -f "libzhp.so" ]; then
		mv libzhp.* bin/
	fi

	mv zhetapi czhp bin/
	mv port exp build/
elif [ $1 = "port" ]; then
	# Run cmake
	cmake .
	
	mkdir -p bin

	# Compile and move shared library
	make -j8 zhp

	if [ -f "libzhp.so" ]; then
		mv libzhp.* bin/
	fi
	
	# Compile and move apps
	make -j8 port

	mv port bin/

	./bin/port
elif [ $1 = "cuda-memcheck" ]; then
	echo "Running $2 on cuda-gdb"

	mkdir -p debug

	cmake -DCMAKE_BUILD_TYPE=Debug .

	make -j8 $2

	mv $2 debug/$2-debug

	cuda-memcheck ./debug/$2-debug
elif [ $1 = "cuda-gdb" ]; then
	echo "Running $2 on cuda-gdb"

	mkdir -p debug

	cmake -DCMAKE_BUILD_TYPE=Debug .

	make -j8 $2

	mv $2 debug/$2-debug

	cuda-gdb ./debug/$2-debug
elif [ $1 = "gdb" ]; then
	echo "Running source/$2.cpp on gdb"

	mkdir -p debug

	cmake -DCMAKE_BUILD_TYPE=Debug .

	make -j8 $2

	mv $2 debug/$2-debug

	gdb ./debug/$2-debug
elif [ $1 = "valgrind" ] || [ $1 = "vgrind" ]; then
	echo "Running source/$2.cpp on valgrind"

	mkdir -p debug

	g++-8 -g source/$2.cpp -o debug/$2-debug

	valgrind ./debug/$2-debug
elif [ $1 = "optimize" ] || [ $1 = "opt" ]; then
	echo "Running source/$2.cpp with optimization"

	mkdir -p debug

	g++-8 -O3 source/$2.cpp -o debug/$2-opt

	./debug/$2-opt
else
	echo "Running source/$1.cpp"

	mkdir -p debug

	cmake -DCMAKE_BUILD_TYPE=Release .

	make -j8 $1

	mv $1 debug/$1-run

	if [ "$1" == "czhp" ]; then
		./debug/$1-run < samples/zhp/simple.zhp
	else
		./debug/$1-run
	fi
fi
