#line 2 "expression_lexer.h"

#line 4 "expression_lexer.h"

#define  E_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define E_FLEX_MAJOR_VERSION 2
#define E_FLEX_MINOR_VERSION 6
#define E_FLEX_SUBMINOR_VERSION 4
#if E_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define econst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define enoreturn __attribute__((__noreturn__))
#else
#define enoreturn
#endif

/* Returned upon end-of-file. */
#define E_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define E_SC_TO_UI(c) ((E_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (e_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The ESTATE alias is for lex
 * compatibility.
 */
#define E_START (((e_start) - 1) / 2)
#define ESTATE E_START
/* Action number for EOF rule of a given start state. */
#define E_STATE_EOF(state) (E_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define E_NEW_FILE erestart( ein  )
#define E_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef E_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, E_BUF_SIZE is 2*E_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define E_BUF_SIZE 32768
#else
#define E_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define E_STATE_BUF_SIZE   ((E_BUF_SIZE + 2) * sizeof(e_state_type))

#ifndef E_TYPEDEF_E_BUFFER_STATE
#define E_TYPEDEF_E_BUFFER_STATE
typedef struct e_buffer_state *E_BUFFER_STATE;
#endif

#ifndef E_TYPEDEF_E_SIZE_T
#define E_TYPEDEF_E_SIZE_T
typedef size_t e_size_t;
#endif

extern int eleng;

extern FILE *ein, *eout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define E_LESS_LINENO(n)
    #define E_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define eless(n) \
	do \
		{ \
		/* Undo effects of setting up etext. */ \
        int eless_macro_arg = (n); \
        E_LESS_LINENO(eless_macro_arg);\
		*e_cp = (e_hold_char); \
		E_RESTORE_E_MORE_OFFSET \
		(e_c_buf_p) = e_cp = e_bp + eless_macro_arg - E_MORE_ADJ; \
		E_DO_BEFORE_ACTION; /* set up etext again */ \
		} \
	while ( 0 )
#define unput(c) eunput( c, (etext_ptr)  )

#ifndef E_STRUCT_E_BUFFER_STATE
#define E_STRUCT_E_BUFFER_STATE
struct e_buffer_state
	{
	FILE *e_input_file;

	char *e_ch_buf;		/* input buffer */
	char *e_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int e_buf_size;

	/* Number of characters read into e_ch_buf, not including EOB
	 * characters.
	 */
	int e_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int e_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int e_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int e_at_bol;

    int e_bs_lineno; /**< The line count. */
    int e_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int e_fill_buffer;

	int e_buffer_status;

#define E_BUFFER_NEW 0
#define E_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as E_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via erestart()), so that the user can continue scanning by
	 * just pointing ein at a new input file.
	 */
#define E_BUFFER_EOF_PENDING 2

	};
#endif /* !E_STRUCT_E_BUFFER_STATE */

/* Stack of input buffers. */
static size_t e_buffer_stack_top = 0; /**< index of top of stack. */
static size_t e_buffer_stack_max = 0; /**< capacity of stack. */
static E_BUFFER_STATE * e_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define E_CURRENT_BUFFER ( (e_buffer_stack) \
                          ? (e_buffer_stack)[(e_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define E_CURRENT_BUFFER_LVALUE (e_buffer_stack)[(e_buffer_stack_top)]

/* e_hold_char holds the character lost when etext is formed. */
static char e_hold_char;
static int e_n_chars;		/* number of characters read into e_ch_buf */
int eleng;

/* Points to current character in buffer. */
static char *e_c_buf_p = NULL;
static int e_init = 0;		/* whether we need to initialize */
static int e_start = 0;	/* start state number */

/* Flag which is used to allow ewrap()'s to do buffer switches
 * instead of setting up a fresh ein.  A bit of a hack ...
 */
static int e_did_buffer_switch_on_eof;

void erestart ( FILE *input_file  );
void e_switch_to_buffer ( E_BUFFER_STATE new_buffer  );
E_BUFFER_STATE e_create_buffer ( FILE *file, int size  );
void e_delete_buffer ( E_BUFFER_STATE b  );
void e_flush_buffer ( E_BUFFER_STATE b  );
void epush_buffer_state ( E_BUFFER_STATE new_buffer  );
void epop_buffer_state ( void );

static void eensure_buffer_stack ( void );
static void e_load_buffer_state ( void );
static void e_init_buffer ( E_BUFFER_STATE b, FILE *file  );
#define E_FLUSH_BUFFER e_flush_buffer( E_CURRENT_BUFFER )

E_BUFFER_STATE e_scan_buffer ( char *base, e_size_t size  );
E_BUFFER_STATE e_scan_string ( const char *e_str  );
E_BUFFER_STATE e_scan_bytes ( const char *bytes, int len  );

void *ealloc ( e_size_t  );
void *erealloc ( void *, e_size_t  );
void efree ( void *  );

#define e_new_buffer e_create_buffer
#define e_set_interactive(is_interactive) \
	{ \
	if ( ! E_CURRENT_BUFFER ){ \
        eensure_buffer_stack (); \
		E_CURRENT_BUFFER_LVALUE =    \
            e_create_buffer( ein, E_BUF_SIZE ); \
	} \
	E_CURRENT_BUFFER_LVALUE->e_is_interactive = is_interactive; \
	}
#define e_set_bol(at_bol) \
	{ \
	if ( ! E_CURRENT_BUFFER ){\
        eensure_buffer_stack (); \
		E_CURRENT_BUFFER_LVALUE =    \
            e_create_buffer( ein, E_BUF_SIZE ); \
	} \
	E_CURRENT_BUFFER_LVALUE->e_at_bol = at_bol; \
	}
#define E_AT_BOL() (E_CURRENT_BUFFER_LVALUE->e_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t E_CHAR;

FILE *ein = NULL, *eout = NULL;

typedef int e_state_type;

extern int elineno;
int elineno = 1;

extern char *etext;
#ifdef etext_ptr
#undef etext_ptr
#endif
#define etext_ptr etext

static e_state_type e_get_previous_state ( void );
static e_state_type e_try_NUL_trans ( e_state_type current_state  );
static int e_get_next_buffer ( void );
static void enoreturn e_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up etext.
 */
#define E_DO_BEFORE_ACTION \
	(etext_ptr) = e_bp; \
	eleng = (int) (e_cp - e_bp); \
	(e_hold_char) = *e_cp; \
	*e_cp = '\0'; \
	(e_c_buf_p) = e_cp;
#define E_NUM_RULES 26
#define E_END_OF_BUFFER 27
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct e_trans_info
	{
	flex_int32_t e_verify;
	flex_int32_t e_nxt;
	};
static const flex_int16_t e_accept[48] =
    {   0,
        0,    0,   27,   25,   24,   17,   18,   15,   14,   23,
       13,   25,   16,    1,   21,   22,   11,   12,   23,   23,
       23,   23,   19,   20,   23,    0,    1,    1,   23,   23,
        4,    3,   23,   23,   23,   23,    0,    6,   10,    8,
        2,    9,    5,    7,    0,    1,    0
    } ;

static const E_CHAR e_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,    5,    6,    7,    8,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,    1,    1,
        1,    1,    1,    1,    7,    7,    7,    7,   12,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
       13,    1,   14,   15,   16,    1,   17,    7,   18,    7,

       19,    7,   20,    7,   21,    7,    7,   22,    7,   23,
       24,    7,    7,    7,   25,   26,    7,    7,    7,    7,
        7,    7,   27,    1,   28,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const E_CHAR e_meta[29] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    1,    1
    } ;

static const flex_int16_t e_base[49] =
    {   0,
        0,    0,   61,   62,   62,   62,   62,   62,   62,    0,
       20,   49,   62,   21,   62,   62,   62,   62,    9,   15,
       21,   42,   62,   62,    0,   47,   32,   25,   20,   39,
        0,    0,   36,   37,   31,   30,   41,    0,    0,    0,
        0,    0,    0,    0,   40,   39,   62,   46
    } ;

static const flex_int16_t e_def[49] =
    {   0,
       47,    1,   47,   47,   47,   47,   47,   47,   47,   48,
       47,   47,   47,   47,   47,   47,   47,   47,   48,   48,
       48,   48,   47,   47,   48,   47,   47,   47,   48,   48,
       48,   48,   48,   48,   48,   48,   47,   48,   48,   48,
       48,   48,   48,   48,   47,   47,    0,   47
    } ;

static const flex_int16_t e_nxt[91] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   10,   15,   16,   17,   18,   10,   19,   10,   10,
       10,   20,   10,   10,   21,   22,   23,   24,   26,   26,
       27,   27,   29,   30,   31,   28,   37,   32,   33,   34,
       26,   35,   27,   37,   38,   39,   45,   25,   45,   46,
       46,   46,   44,   43,   42,   41,   40,   28,   36,   28,
       47,    3,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47
    } ;

static const flex_int16_t e_chk[91] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   11,   14,
       11,   14,   19,   19,   20,   28,   28,   20,   20,   21,
       27,   21,   27,   28,   29,   29,   37,   48,   37,   46,
       45,   37,   36,   35,   34,   33,   30,   26,   22,   12,
        3,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47
    } ;

static e_state_type e_last_accepting_state;
static char *e_last_accepting_cpos;

extern int e_flex_debug;
int e_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define emore() emore_used_but_not_detected
#define E_MORE_ADJ 0
#define E_RESTORE_E_MORE_OFFSET
char *etext;
#line 1 "expression_lexer.l"
#line 2 "expression_lexer.l"
	#include <iostream>
	#include <sstream>
	#include <string>

	using namespace std;
	
	extern "C" int elex();
#line 480 "expression_lexer.h"
#line 481 "expression_lexer.h"

#define INITIAL 0

#ifndef E_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef E_EXTRA_TYPE
#define E_EXTRA_TYPE void *
#endif

static int e_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int elex_destroy ( void );

int eget_debug ( void );

void eset_debug ( int debug_flag  );

E_EXTRA_TYPE eget_extra ( void );

void eset_extra ( E_EXTRA_TYPE user_defined  );

FILE *eget_in ( void );

void eset_in  ( FILE * _in_str  );

FILE *eget_out ( void );

void eset_out  ( FILE * _out_str  );

			int eget_leng ( void );

char *eget_text ( void );

int eget_lineno ( void );

void eset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef E_SKIP_EWRAP
#ifdef __cplusplus
extern "C" int ewrap ( void );
#else
extern int ewrap ( void );
#endif
#endif

#ifndef E_NO_UNPUT
    
    static void eunput ( int c, char *buf_ptr  );
    
#endif

#ifndef etext_ptr
static void e_flex_strncpy ( char *, const char *, int );
#endif

#ifdef E_NEED_STRLEN
static int e_flex_strlen ( const char * );
#endif

#ifndef E_NO_INPUT
#ifdef __cplusplus
static int einput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef E_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define E_READ_BUF_SIZE 16384
#else
#define E_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( etext, (size_t) eleng, 1, eout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or E_NULL,
 * is returned in "result".
 */
#ifndef E_INPUT
#define E_INPUT(buf,result,max_size) \
	if ( E_CURRENT_BUFFER_LVALUE->e_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( ein )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( ein ) ) \
			E_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (e_size_t) max_size, ein)) == 0 && ferror(ein)) \
			{ \
			if( errno != EINTR) \
				{ \
				E_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(ein); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "eterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef eterminate
#define eterminate() return E_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef E_START_STACK_INCR
#define E_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef E_FATAL_ERROR
#define E_FATAL_ERROR(msg) e_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef E_DECL
#define E_DECL_IS_OURS 1

extern int elex (void);

#define E_DECL int elex (void)
#endif /* !E_DECL */

/* Code executed at the beginning of each rule, after etext and eleng
 * have been set up.
 */
#ifndef E_USER_ACTION
#define E_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef E_BREAK
#define E_BREAK /*LINTED*/break;
#endif

#define E_RULE_SETUP \
	E_USER_ACTION

/** The main scanner function which does all the work.
 */
E_DECL
{
	e_state_type e_current_state;
	char *e_cp, *e_bp;
	int e_act;
    
	if ( !(e_init) )
		{
		(e_init) = 1;

#ifdef E_USER_INIT
		E_USER_INIT;
#endif

		if ( ! (e_start) )
			(e_start) = 1;	/* first start state */

		if ( ! ein )
			ein = stdin;

		if ( ! eout )
			eout = stdout;

		if ( ! E_CURRENT_BUFFER ) {
			eensure_buffer_stack ();
			E_CURRENT_BUFFER_LVALUE =
				e_create_buffer( ein, E_BUF_SIZE );
		}

		e_load_buffer_state(  );
		}

	{
#line 11 "expression_lexer.l"


#line 701 "expression_lexer.h"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		e_cp = (e_c_buf_p);

		/* Support of etext. */
		*e_cp = (e_hold_char);

		/* e_bp points to the position in e_ch_buf of the start of
		 * the current run.
		 */
		e_bp = e_cp;

		e_current_state = (e_start);
e_match:
		do
			{
			E_CHAR e_c = e_ec[E_SC_TO_UI(*e_cp)] ;
			if ( e_accept[e_current_state] )
				{
				(e_last_accepting_state) = e_current_state;
				(e_last_accepting_cpos) = e_cp;
				}
			while ( e_chk[e_base[e_current_state] + e_c] != e_current_state )
				{
				e_current_state = (int) e_def[e_current_state];
				if ( e_current_state >= 48 )
					e_c = e_meta[e_c];
				}
			e_current_state = e_nxt[e_base[e_current_state] + e_c];
			++e_cp;
			}
		while ( e_base[e_current_state] != 62 );

e_find_action:
		e_act = e_accept[e_current_state];
		if ( e_act == 0 )
			{ /* have to back up */
			e_cp = (e_last_accepting_cpos);
			e_current_state = (e_last_accepting_state);
			e_act = e_accept[e_current_state];
			}

		E_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( e_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of E_DO_BEFORE_ACTION */
			*e_cp = (e_hold_char);
			e_cp = (e_last_accepting_cpos);
			e_current_state = (e_last_accepting_state);
			goto e_find_action;

case 1:
E_RULE_SETUP
#line 13 "expression_lexer.l"
{
		istringstream iss(etext);
		iss >> elval.value;
		return E_NUMBER;
}
	E_BREAK
case 2:
E_RULE_SETUP
#line 19 "expression_lexer.l"
{return E_LOG;}
	E_BREAK
case 3:
E_RULE_SETUP
#line 20 "expression_lexer.l"
{return E_LN;}
	E_BREAK
case 4:
E_RULE_SETUP
#line 21 "expression_lexer.l"
{return E_LG;}
	E_BREAK
case 5:
E_RULE_SETUP
#line 23 "expression_lexer.l"
{return E_SIN;}
	E_BREAK
case 6:
E_RULE_SETUP
#line 24 "expression_lexer.l"
{return E_COS;}
	E_BREAK
case 7:
E_RULE_SETUP
#line 25 "expression_lexer.l"
{return E_TAN;}
	E_BREAK
case 8:
E_RULE_SETUP
#line 26 "expression_lexer.l"
{return E_CSC;}
	E_BREAK
case 9:
E_RULE_SETUP
#line 27 "expression_lexer.l"
{return E_SEC;}
	E_BREAK
case 10:
E_RULE_SETUP
#line 28 "expression_lexer.l"
{return E_COT;}
	E_BREAK
case 11:
E_RULE_SETUP
#line 31 "expression_lexer.l"
{return E_SUPERSCRIPT;}
	E_BREAK
case 12:
E_RULE_SETUP
#line 32 "expression_lexer.l"
{return E_SUBSCRIPT;}
	E_BREAK
case 13:
E_RULE_SETUP
#line 34 "expression_lexer.l"
{return E_MINUS;}
	E_BREAK
case 14:
E_RULE_SETUP
#line 35 "expression_lexer.l"
{return E_PLUS;}
	E_BREAK
case 15:
E_RULE_SETUP
#line 36 "expression_lexer.l"
{return E_MULT;}
	E_BREAK
case 16:
E_RULE_SETUP
#line 37 "expression_lexer.l"
{return E_DIV;}
	E_BREAK
case 17:
E_RULE_SETUP
#line 39 "expression_lexer.l"
{return E_LPAREN;}
	E_BREAK
case 18:
E_RULE_SETUP
#line 40 "expression_lexer.l"
{return E_RPAREN;}
	E_BREAK
case 19:
E_RULE_SETUP
#line 42 "expression_lexer.l"
{return E_LBRACE;}
	E_BREAK
case 20:
E_RULE_SETUP
#line 43 "expression_lexer.l"
{return E_RBRACE;}
	E_BREAK
case 21:
E_RULE_SETUP
#line 45 "expression_lexer.l"
{return E_LBRACKET;}
	E_BREAK
case 22:
E_RULE_SETUP
#line 46 "expression_lexer.l"
{return E_RBRACKET;}
	E_BREAK
case 23:
E_RULE_SETUP
#line 48 "expression_lexer.l"
{
		elval.ident = etext;
		return E_IDENT;
}
	E_BREAK
case 24:
/* rule 24 can match eol */
E_RULE_SETUP
#line 53 "expression_lexer.l"
{return E_END;}
	E_BREAK
case 25:
E_RULE_SETUP
#line 55 "expression_lexer.l"
{}
	E_BREAK
case 26:
E_RULE_SETUP
#line 57 "expression_lexer.l"
ECHO;
	E_BREAK
#line 896 "expression_lexer.h"
case E_STATE_EOF(INITIAL):
	eterminate();

	case E_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int e_amount_of_matched_text = (int) (e_cp - (etext_ptr)) - 1;

		/* Undo the effects of E_DO_BEFORE_ACTION. */
		*e_cp = (e_hold_char);
		E_RESTORE_E_MORE_OFFSET

		if ( E_CURRENT_BUFFER_LVALUE->e_buffer_status == E_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed ein at a new source and called
			 * elex().  If so, then we have to assure
			 * consistency between E_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(e_n_chars) = E_CURRENT_BUFFER_LVALUE->e_n_chars;
			E_CURRENT_BUFFER_LVALUE->e_input_file = ein;
			E_CURRENT_BUFFER_LVALUE->e_buffer_status = E_BUFFER_NORMAL;
			}

		/* Note that here we test for e_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since e_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (e_c_buf_p) <= &E_CURRENT_BUFFER_LVALUE->e_ch_buf[(e_n_chars)] )
			{ /* This was really a NUL. */
			e_state_type e_next_state;

			(e_c_buf_p) = (etext_ptr) + e_amount_of_matched_text;

			e_current_state = e_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * e_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			e_next_state = e_try_NUL_trans( e_current_state );

			e_bp = (etext_ptr) + E_MORE_ADJ;

			if ( e_next_state )
				{
				/* Consume the NUL. */
				e_cp = ++(e_c_buf_p);
				e_current_state = e_next_state;
				goto e_match;
				}

			else
				{
				e_cp = (e_c_buf_p);
				goto e_find_action;
				}
			}

		else switch ( e_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(e_did_buffer_switch_on_eof) = 0;

				if ( ewrap(  ) )
					{
					/* Note: because we've taken care in
					 * e_get_next_buffer() to have set up
					 * etext, we can now set up
					 * e_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * E_NULL, it'll still work - another
					 * E_NULL will get returned.
					 */
					(e_c_buf_p) = (etext_ptr) + E_MORE_ADJ;

					e_act = E_STATE_EOF(E_START);
					goto do_action;
					}

				else
					{
					if ( ! (e_did_buffer_switch_on_eof) )
						E_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(e_c_buf_p) =
					(etext_ptr) + e_amount_of_matched_text;

				e_current_state = e_get_previous_state(  );

				e_cp = (e_c_buf_p);
				e_bp = (etext_ptr) + E_MORE_ADJ;
				goto e_match;

			case EOB_ACT_LAST_MATCH:
				(e_c_buf_p) =
				&E_CURRENT_BUFFER_LVALUE->e_ch_buf[(e_n_chars)];

				e_current_state = e_get_previous_state(  );

				e_cp = (e_c_buf_p);
				e_bp = (etext_ptr) + E_MORE_ADJ;
				goto e_find_action;
			}
		break;
		}

	default:
		E_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of elex */

/* e_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int e_get_next_buffer (void)
{
    	char *dest = E_CURRENT_BUFFER_LVALUE->e_ch_buf;
	char *source = (etext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (e_c_buf_p) > &E_CURRENT_BUFFER_LVALUE->e_ch_buf[(e_n_chars) + 1] )
		E_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( E_CURRENT_BUFFER_LVALUE->e_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (e_c_buf_p) - (etext_ptr) - E_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((e_c_buf_p) - (etext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( E_CURRENT_BUFFER_LVALUE->e_buffer_status == E_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		E_CURRENT_BUFFER_LVALUE->e_n_chars = (e_n_chars) = 0;

	else
		{
			int num_to_read =
			E_CURRENT_BUFFER_LVALUE->e_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			E_BUFFER_STATE b = E_CURRENT_BUFFER_LVALUE;

			int e_c_buf_p_offset =
				(int) ((e_c_buf_p) - b->e_ch_buf);

			if ( b->e_is_our_buffer )
				{
				int new_size = b->e_buf_size * 2;

				if ( new_size <= 0 )
					b->e_buf_size += b->e_buf_size / 8;
				else
					b->e_buf_size *= 2;

				b->e_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					erealloc( (void *) b->e_ch_buf,
							 (e_size_t) (b->e_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->e_ch_buf = NULL;

			if ( ! b->e_ch_buf )
				E_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(e_c_buf_p) = &b->e_ch_buf[e_c_buf_p_offset];

			num_to_read = E_CURRENT_BUFFER_LVALUE->e_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > E_READ_BUF_SIZE )
			num_to_read = E_READ_BUF_SIZE;

		/* Read in more data. */
		E_INPUT( (&E_CURRENT_BUFFER_LVALUE->e_ch_buf[number_to_move]),
			(e_n_chars), num_to_read );

		E_CURRENT_BUFFER_LVALUE->e_n_chars = (e_n_chars);
		}

	if ( (e_n_chars) == 0 )
		{
		if ( number_to_move == E_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			erestart( ein  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			E_CURRENT_BUFFER_LVALUE->e_buffer_status =
				E_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((e_n_chars) + number_to_move) > E_CURRENT_BUFFER_LVALUE->e_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (e_n_chars) + number_to_move + ((e_n_chars) >> 1);
		E_CURRENT_BUFFER_LVALUE->e_ch_buf = (char *) erealloc(
			(void *) E_CURRENT_BUFFER_LVALUE->e_ch_buf, (e_size_t) new_size  );
		if ( ! E_CURRENT_BUFFER_LVALUE->e_ch_buf )
			E_FATAL_ERROR( "out of dynamic memory in e_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		E_CURRENT_BUFFER_LVALUE->e_buf_size = (int) (new_size - 2);
	}

	(e_n_chars) += number_to_move;
	E_CURRENT_BUFFER_LVALUE->e_ch_buf[(e_n_chars)] = E_END_OF_BUFFER_CHAR;
	E_CURRENT_BUFFER_LVALUE->e_ch_buf[(e_n_chars) + 1] = E_END_OF_BUFFER_CHAR;

	(etext_ptr) = &E_CURRENT_BUFFER_LVALUE->e_ch_buf[0];

	return ret_val;
}

/* e_get_previous_state - get the state just before the EOB char was reached */

    static e_state_type e_get_previous_state (void)
{
	e_state_type e_current_state;
	char *e_cp;
    
	e_current_state = (e_start);

	for ( e_cp = (etext_ptr) + E_MORE_ADJ; e_cp < (e_c_buf_p); ++e_cp )
		{
		E_CHAR e_c = (*e_cp ? e_ec[E_SC_TO_UI(*e_cp)] : 1);
		if ( e_accept[e_current_state] )
			{
			(e_last_accepting_state) = e_current_state;
			(e_last_accepting_cpos) = e_cp;
			}
		while ( e_chk[e_base[e_current_state] + e_c] != e_current_state )
			{
			e_current_state = (int) e_def[e_current_state];
			if ( e_current_state >= 48 )
				e_c = e_meta[e_c];
			}
		e_current_state = e_nxt[e_base[e_current_state] + e_c];
		}

	return e_current_state;
}

/* e_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = e_try_NUL_trans( current_state );
 */
    static e_state_type e_try_NUL_trans  (e_state_type e_current_state )
{
	int e_is_jam;
    	char *e_cp = (e_c_buf_p);

	E_CHAR e_c = 1;
	if ( e_accept[e_current_state] )
		{
		(e_last_accepting_state) = e_current_state;
		(e_last_accepting_cpos) = e_cp;
		}
	while ( e_chk[e_base[e_current_state] + e_c] != e_current_state )
		{
		e_current_state = (int) e_def[e_current_state];
		if ( e_current_state >= 48 )
			e_c = e_meta[e_c];
		}
	e_current_state = e_nxt[e_base[e_current_state] + e_c];
	e_is_jam = (e_current_state == 47);

		return e_is_jam ? 0 : e_current_state;
}

#ifndef E_NO_UNPUT

    static void eunput (int c, char * e_bp )
{
	char *e_cp;
    
    e_cp = (e_c_buf_p);

	/* undo effects of setting up etext */
	*e_cp = (e_hold_char);

	if ( e_cp < E_CURRENT_BUFFER_LVALUE->e_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (e_n_chars) + 2;
		char *dest = &E_CURRENT_BUFFER_LVALUE->e_ch_buf[
					E_CURRENT_BUFFER_LVALUE->e_buf_size + 2];
		char *source =
				&E_CURRENT_BUFFER_LVALUE->e_ch_buf[number_to_move];

		while ( source > E_CURRENT_BUFFER_LVALUE->e_ch_buf )
			*--dest = *--source;

		e_cp += (int) (dest - source);
		e_bp += (int) (dest - source);
		E_CURRENT_BUFFER_LVALUE->e_n_chars =
			(e_n_chars) = (int) E_CURRENT_BUFFER_LVALUE->e_buf_size;

		if ( e_cp < E_CURRENT_BUFFER_LVALUE->e_ch_buf + 2 )
			E_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--e_cp = (char) c;

	(etext_ptr) = e_bp;
	(e_hold_char) = *e_cp;
	(e_c_buf_p) = e_cp;
}

#endif

#ifndef E_NO_INPUT
#ifdef __cplusplus
    static int einput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(e_c_buf_p) = (e_hold_char);

	if ( *(e_c_buf_p) == E_END_OF_BUFFER_CHAR )
		{
		/* e_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (e_c_buf_p) < &E_CURRENT_BUFFER_LVALUE->e_ch_buf[(e_n_chars)] )
			/* This was really a NUL. */
			*(e_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((e_c_buf_p) - (etext_ptr));
			++(e_c_buf_p);

			switch ( e_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because e_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					erestart( ein );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ewrap(  ) )
						return 0;

					if ( ! (e_did_buffer_switch_on_eof) )
						E_NEW_FILE;
#ifdef __cplusplus
					return einput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(e_c_buf_p) = (etext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (e_c_buf_p);	/* cast for 8-bit char's */
	*(e_c_buf_p) = '\0';	/* preserve etext */
	(e_hold_char) = *++(e_c_buf_p);

	return c;
}
#endif	/* ifndef E_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void erestart  (FILE * input_file )
{
    
	if ( ! E_CURRENT_BUFFER ){
        eensure_buffer_stack ();
		E_CURRENT_BUFFER_LVALUE =
            e_create_buffer( ein, E_BUF_SIZE );
	}

	e_init_buffer( E_CURRENT_BUFFER, input_file );
	e_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void e_switch_to_buffer  (E_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		epop_buffer_state();
	 *		epush_buffer_state(new_buffer);
     */
	eensure_buffer_stack ();
	if ( E_CURRENT_BUFFER == new_buffer )
		return;

	if ( E_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(e_c_buf_p) = (e_hold_char);
		E_CURRENT_BUFFER_LVALUE->e_buf_pos = (e_c_buf_p);
		E_CURRENT_BUFFER_LVALUE->e_n_chars = (e_n_chars);
		}

	E_CURRENT_BUFFER_LVALUE = new_buffer;
	e_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (ewrap()) processing, but the only time this flag
	 * is looked at is after ewrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(e_did_buffer_switch_on_eof) = 1;
}

static void e_load_buffer_state  (void)
{
    	(e_n_chars) = E_CURRENT_BUFFER_LVALUE->e_n_chars;
	(etext_ptr) = (e_c_buf_p) = E_CURRENT_BUFFER_LVALUE->e_buf_pos;
	ein = E_CURRENT_BUFFER_LVALUE->e_input_file;
	(e_hold_char) = *(e_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c E_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    E_BUFFER_STATE e_create_buffer  (FILE * file, int  size )
{
	E_BUFFER_STATE b;
    
	b = (E_BUFFER_STATE) ealloc( sizeof( struct e_buffer_state )  );
	if ( ! b )
		E_FATAL_ERROR( "out of dynamic memory in e_create_buffer()" );

	b->e_buf_size = size;

	/* e_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->e_ch_buf = (char *) ealloc( (e_size_t) (b->e_buf_size + 2)  );
	if ( ! b->e_ch_buf )
		E_FATAL_ERROR( "out of dynamic memory in e_create_buffer()" );

	b->e_is_our_buffer = 1;

	e_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with e_create_buffer()
 * 
 */
    void e_delete_buffer (E_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == E_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		E_CURRENT_BUFFER_LVALUE = (E_BUFFER_STATE) 0;

	if ( b->e_is_our_buffer )
		efree( (void *) b->e_ch_buf  );

	efree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a erestart() or at EOF.
 */
    static void e_init_buffer  (E_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	e_flush_buffer( b );

	b->e_input_file = file;
	b->e_fill_buffer = 1;

    /* If b is the current buffer, then e_init_buffer was _probably_
     * called from erestart() or through e_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != E_CURRENT_BUFFER){
        b->e_bs_lineno = 1;
        b->e_bs_column = 0;
    }

        b->e_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, E_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c E_CURRENT_BUFFER.
 * 
 */
    void e_flush_buffer (E_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->e_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->e_ch_buf[0] = E_END_OF_BUFFER_CHAR;
	b->e_ch_buf[1] = E_END_OF_BUFFER_CHAR;

	b->e_buf_pos = &b->e_ch_buf[0];

	b->e_at_bol = 1;
	b->e_buffer_status = E_BUFFER_NEW;

	if ( b == E_CURRENT_BUFFER )
		e_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void epush_buffer_state (E_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	eensure_buffer_stack();

	/* This block is copied from e_switch_to_buffer. */
	if ( E_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(e_c_buf_p) = (e_hold_char);
		E_CURRENT_BUFFER_LVALUE->e_buf_pos = (e_c_buf_p);
		E_CURRENT_BUFFER_LVALUE->e_n_chars = (e_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (E_CURRENT_BUFFER)
		(e_buffer_stack_top)++;
	E_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from e_switch_to_buffer. */
	e_load_buffer_state(  );
	(e_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void epop_buffer_state (void)
{
    	if (!E_CURRENT_BUFFER)
		return;

	e_delete_buffer(E_CURRENT_BUFFER );
	E_CURRENT_BUFFER_LVALUE = NULL;
	if ((e_buffer_stack_top) > 0)
		--(e_buffer_stack_top);

	if (E_CURRENT_BUFFER) {
		e_load_buffer_state(  );
		(e_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void eensure_buffer_stack (void)
{
	e_size_t num_to_alloc;
    
	if (!(e_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(e_buffer_stack) = (struct e_buffer_state**)ealloc
								(num_to_alloc * sizeof(struct e_buffer_state*)
								);
		if ( ! (e_buffer_stack) )
			E_FATAL_ERROR( "out of dynamic memory in eensure_buffer_stack()" );

		memset((e_buffer_stack), 0, num_to_alloc * sizeof(struct e_buffer_state*));

		(e_buffer_stack_max) = num_to_alloc;
		(e_buffer_stack_top) = 0;
		return;
	}

	if ((e_buffer_stack_top) >= ((e_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		e_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (e_buffer_stack_max) + grow_size;
		(e_buffer_stack) = (struct e_buffer_state**)erealloc
								((e_buffer_stack),
								num_to_alloc * sizeof(struct e_buffer_state*)
								);
		if ( ! (e_buffer_stack) )
			E_FATAL_ERROR( "out of dynamic memory in eensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((e_buffer_stack) + (e_buffer_stack_max), 0, grow_size * sizeof(struct e_buffer_state*));
		(e_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
E_BUFFER_STATE e_scan_buffer  (char * base, e_size_t  size )
{
	E_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != E_END_OF_BUFFER_CHAR ||
	     base[size-1] != E_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (E_BUFFER_STATE) ealloc( sizeof( struct e_buffer_state )  );
	if ( ! b )
		E_FATAL_ERROR( "out of dynamic memory in e_scan_buffer()" );

	b->e_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->e_buf_pos = b->e_ch_buf = base;
	b->e_is_our_buffer = 0;
	b->e_input_file = NULL;
	b->e_n_chars = b->e_buf_size;
	b->e_is_interactive = 0;
	b->e_at_bol = 1;
	b->e_fill_buffer = 0;
	b->e_buffer_status = E_BUFFER_NEW;

	e_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to elex() will
 * scan from a @e copy of @a str.
 * @param estr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       e_scan_bytes() instead.
 */
E_BUFFER_STATE e_scan_string (const char * estr )
{
    
	return e_scan_bytes( estr, (int) strlen(estr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to elex() will
 * scan from a @e copy of @a bytes.
 * @param ebytes the byte buffer to scan
 * @param _ebytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
E_BUFFER_STATE e_scan_bytes  (const char * ebytes, int  _ebytes_len )
{
	E_BUFFER_STATE b;
	char *buf;
	e_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (e_size_t) (_ebytes_len + 2);
	buf = (char *) ealloc( n  );
	if ( ! buf )
		E_FATAL_ERROR( "out of dynamic memory in e_scan_bytes()" );

	for ( i = 0; i < _ebytes_len; ++i )
		buf[i] = ebytes[i];

	buf[_ebytes_len] = buf[_ebytes_len+1] = E_END_OF_BUFFER_CHAR;

	b = e_scan_buffer( buf, n );
	if ( ! b )
		E_FATAL_ERROR( "bad buffer in e_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->e_is_our_buffer = 1;

	return b;
}

#ifndef E_EXIT_FAILURE
#define E_EXIT_FAILURE 2
#endif

static void enoreturn e_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( E_EXIT_FAILURE );
}

/* Redefine eless() so it works in section 3 code. */

#undef eless
#define eless(n) \
	do \
		{ \
		/* Undo effects of setting up etext. */ \
        int eless_macro_arg = (n); \
        E_LESS_LINENO(eless_macro_arg);\
		etext[eleng] = (e_hold_char); \
		(e_c_buf_p) = etext + eless_macro_arg; \
		(e_hold_char) = *(e_c_buf_p); \
		*(e_c_buf_p) = '\0'; \
		eleng = eless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int eget_lineno  (void)
{
    
    return elineno;
}

/** Get the input stream.
 * 
 */
FILE *eget_in  (void)
{
        return ein;
}

/** Get the output stream.
 * 
 */
FILE *eget_out  (void)
{
        return eout;
}

/** Get the length of the current token.
 * 
 */
int eget_leng  (void)
{
        return eleng;
}

/** Get the current token.
 * 
 */

char *eget_text  (void)
{
        return etext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void eset_lineno (int  _line_number )
{
    
    elineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see e_switch_to_buffer
 */
void eset_in (FILE *  _in_str )
{
        ein = _in_str ;
}

void eset_out (FILE *  _out_str )
{
        eout = _out_str ;
}

int eget_debug  (void)
{
        return e_flex_debug;
}

void eset_debug (int  _bdebug )
{
        e_flex_debug = _bdebug ;
}

static int e_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from elex_destroy(), so don't allocate here.
     */

    (e_buffer_stack) = NULL;
    (e_buffer_stack_top) = 0;
    (e_buffer_stack_max) = 0;
    (e_c_buf_p) = NULL;
    (e_init) = 0;
    (e_start) = 0;

/* Defined in main.c */
#ifdef E_STDINIT
    ein = stdin;
    eout = stdout;
#else
    ein = NULL;
    eout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * elex_init()
     */
    return 0;
}

/* elex_destroy is for both reentrant and non-reentrant scanners. */
int elex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(E_CURRENT_BUFFER){
		e_delete_buffer( E_CURRENT_BUFFER  );
		E_CURRENT_BUFFER_LVALUE = NULL;
		epop_buffer_state();
	}

	/* Destroy the stack itself. */
	efree((e_buffer_stack) );
	(e_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * elex() is called, initialization will occur. */
    e_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef etext_ptr
static void e_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef E_NEED_STRLEN
static int e_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *ealloc (e_size_t  size )
{
			return malloc(size);
}

void *erealloc  (void * ptr, e_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void efree (void * ptr )
{
			free( (char *) ptr );	/* see erealloc() for (char *) cast */
}

#define ETABLES_NAME "etables"

#line 57 "expression_lexer.l"


