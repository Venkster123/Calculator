Running portability tests...

==========================================================

Placement into Barns...

var: [e] - 2.17
barn-var: [e] - 2.17
barn-var: 2.17

==========================================================

Expression computation...

Value: 7
Value: 12
Value: 9
Value: 4
Value: 7
Value: 3/4
Value: 15
Value: [7, 9]
Value: 32
Value: -12
Value: 18
Value: 60
Value: 20/3
Value: 15/4
Value: 20/3
Value: 27
Value: -108
Value: -36
Value: 8.15485
Value: 6.28319
Value: 5.43656
Value: 9.42478
Value: -0.544021
Value: -0.190711
Value: -1.48761
Value: 22027.5
Value: 1.00018
Value: 6.62451
Value: 2

==========================================================

Function computation and differentiation...

f(10, -4) = 96
df/dx (10, -4) = 20
Exception caught succesfully

==========================================================

Node simplification...

Tree:
#1: ^ [power] (0x5619ecb8b800, operation constant) @ 0x7fff5aaaac08
        #1: "x" points to 0x5619ecb8bc00 (0x5619ecb8bc80, variable reference) @ 0x7fff5aaaa810
        #2: * [multiply] (0x5619ecb8bb00, operation constant) @ 0x7fff5aaaa810
                #1: 2 (0x5619ecb8bae0, constant integer) @ 0x7fff5aaaa760
                #2: 1 (0x5619ecb8bb40, constant integer) @ 0x7fff5aaaa760
Refs [1]
#1: 0 (0x5619ecb8bbc0, none) @ 0x5619ecb8bc00
Simplifying...

==========================================================

Expression functions...

1: 8
x: 18

==========================================================

Tensor and indexing...

[[[4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000]], [[4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000]], [[4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000]], [[4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000]]]
[[[45.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000]], [[4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000]], [[4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000]], [[4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000], [4.000000, 4.000000, 4.000000]]]
[[1.000000, 2.000000], [3.000000, 4.000000], [5.000000, 6.000000]]
[[1.000000, 2.000000], [3.000000, 25.000000], [5.000000, 6.000000]]