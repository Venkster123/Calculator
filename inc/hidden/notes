==========
Additions:
==========

Add API functions as standard with lexing/parsing. Otherwise allow Function
objects to refer to C/C++ functions.

Add a data set class for arbitary input/output dimensions. Use its structure to
make regression techiniques smoother. Add items like Vandermonde matrices, and
such.

Add Gaussian elimination.

Add more general matrix/vector concatenation operations.

Add special operations that take a variadic number of operations. Although
operations can already take vectors of operands, add a type identifier (in the
overloading sense) that is able to recognize variadic operations.

==============
Modifications:
==============

Remove the inheritance connection between the operations and the general token
class. (Replace instead with operation_holder)

Later remove the immediate transition from i to the imaginary number; if indeed
the user has not yet defined a Variable i, then make i equal to the imaginary
number.

Make operations and classes more efficient, i.e. computation of complex numbers
or polynomials, etc. Test the speedup through benchmark tests.

Refactor tokens to "Variant" and operand to "Operand", and move both to the engine
header, as they will be usable classes.

=====
Bugs:
=====

Rational class has problems comparing with zero (perhaps even other integers).
Also cannot use unary minus operator, fix this.

==========
Standards:
==========

------------
Class names:
------------
	- Classes which are meant to be hidden to the user should be lower_case
	- Usable classes (polynomials, functions, vectors, matrices, etc.)
	  should be UpperCase
	- Classes that are under the usable scope should be __UpperCase if their
	  usage is discouraged 

-----------
Namespaces:
-----------

Everything that the library provides shold be enclosed in a zhetapi namespace.
Use nested namespaces for specific modules of the library, such as machine
learneing (ml).

-------------
Member names:
-------------

Should begin with a double underscore.
